*******************************************************************
NOTE ABOUT SLIENT PUSH NOTIFICATION 
To implement slient push notification in the app, you have to activate Backgroud Mode Capabilities with remote notifications. Some new delegate methods must be implemented depending on which state the app has and the flag content-available set to 1 in json.
*******************************************************************

STEPS FOR IMPLEMENTING PUSH NOTIFICATION 

1. Register App Push Notifications
First, the app must obtain a token from the APNS(Apple Push Notification Service). The token that uniquely identifies your app, is made from the app using the UNUserNotificationCenter class. In order for the app to be able to receive push notifications at all, the switch for push notifications must be activated in the capability settings.
A new provisioning profile will be created with push notification capability.

The request can now be made to APNS using requestAuthorization method. After that if user agrees, the app should request the app token via registerForRemoteNotifications.

2. Receive Token From APNS
After the request via registerForRemoteNotifications was successful, the function application:didRegisterForRemoteNotificationsWithDeviceToken is called in the appdelegate. 

3. Update Backend Service with Information about Device/User
In order for your private server to know which devices have registered for which push notifications, it needs to know that this has been approved.

4. Provider sends Request to APNS
Only requests that are authenticated with an authentication-token may be sent to the APNS. This ensures that only the originator of the authentication-token has the possibility to send notifications to his users. This token can be used for all your apps in all forms. (Development, Production)

To create one you need to go o the Apple Member Center and create one, give it a name and download it. You should now have a file with the .p8 extension.

5. APNS sending push notifications
The push notifications arrive in the form of JSON. The maximum size of this file is 4kb. If it exceeds the size, it will simply not be delievered.
The format of this JSON is partly given by Apple. Here is an example for a possible configuration :

{
   "aps" : {
      "alert" : {
         "title" : "Hello World",
         "subtitle" : "This is awesome"
         "body” : “Even more Content",
         "thread_identifier": "Master-Thread"
      },
     "badge": 12,
     "sound": "customSound.caf"
   },
   "custom-data" : {
     "custom-element": "custom-value"
   }
}
HTTP HEADER FIELDS
apns-collapse-id

aps — top element defined by apple
alert — will contain message specific items
title — title of the notification
subtitle — subtitle of the notification
body — body of notification that be hidden via touch or face-id
thread_identifier — USED FOR GROUPED NOTIFICATIONS
custom-data — You custom json should be provided under the aps object
apns-collapse-id — a HTTP-Header Field which defines that new messages replace the old ones.

6. Responding to Interaction
After push notification has arrived on the user’s device, he can interact with it

7. Custom Actions
It is possible to define different categories within the app. These categories consist of a unique identifier and a set of actions. After they have been defined they only have to be added to the UNUserNotificationCenter.

8. Payload Modification
You can format content of push notification using “Notification Service Extension”. Mediator between user interface and APNS. 

9. Custom UI
Use notification content extension for this purpose. The target will contain a new ViewController, a plist and a Storyboard which can be modified as you wish.
